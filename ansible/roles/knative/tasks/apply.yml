---
- name: Ensure latest_knative_github exists.
  file:
    path: "{{ role_path }}/latest_knative_github"
    state: directory

- name: Do we already have the KNative manifests
  stat:
    path: "{{ role_path }}/latest_knative_github/serving.yaml2"
  register: knative

- name: Download KNative serving manifests
  get_url:
    url: https://github.com/knative/serving/releases/download/{{ knative_version }}/{{ item }}.yaml
    dest: "{{ role_path }}/latest_knative_github/{{ item }}.yaml"
    mode: '0440'
  with_items:
    - serving
    - monitoring
  when: knative.stat.exists == False 

- name: Download KNative eventing manifests
  get_url:
    url: https://github.com/knative/eventing/releases/download/{{ knative_version }}/{{ item }}.yaml
    dest: "{{ role_path }}/latest_knative_github/{{ item }}.yaml"
    mode: '0440'
  with_items:
    - release
  when: knative.stat.exists == False 

- name: Download KNative eventing kafka manifests
  get_url:
    url: https://github.com/knative/eventing-contrib/releases/download/{{ knative_version }}/{{ item }}.yaml
    dest: "{{ role_path }}/latest_knative_github/{{ item }}.yaml"
    mode: '0440'
  with_items:
    - kafka-channel
    - kafka-source
  when: knative.stat.exists == False 

- include: common/clean-manifest.yaml
  with_items:
    - serving
    - monitoring
    - release
    - kafka-channel
    - kafka-source
  loop_control:
    loop_var: manifest

- name: Create knative CRDs.
  command:    kubectl apply --selector knative.dev/crd-install=true -f "{{ role_path }}/latest_knative_github/{{ filename }}.yaml"
  with_items:
    - serving
    - release
  loop_control:
    loop_var: filename
  register: knative_crd
  until: 'knative_crd.rc == 0'
  retries: 15
  delay: 1
  # changed_when: False
  changed_when: "' changed' in knative_crd.stdout"

- name: debug
  debug: var=knative_crd

- name: Create knative serving, eventing and monitoring.
  k8s:
    state: present
    src: "{{ role_path }}/latest_knative_github/{{ filename }}.yaml"
  with_items:
    - serving
    - release
    - monitoring
  loop_control:
    loop_var: filename

- name: Is kafka installed.
  command: kubectl wait kafka/standalone --for=condition=Ready --timeout=30s -n kafka
  register: kafka_installed
  ignore_errors: yes
  changed_when: False

- name: Knative Kafka eventing channel and source
  k8s:
    state: present
    src: "{{ role_path }}/latest_knative_github/{{ filename }}.yaml"
  with_items:
    - kafka-channel
    - kafka-source
  loop_control:
    loop_var: filename
  when: kafka_installed.rc == 0

- name: Patch Knative eventing kafka configuration
  command: kubectl -n knative-eventing patch configmap/config-kafka --type merge -p '{"data":{"bootstrapServers":"standalone-kafka-bootstrap.kafka:9092"}}'
  when: kafka_installed.rc == 0

- name: Ensure /tmp/knative exists.
  file:
    path: "{{ temp }}/knative"
    state: directory
  # when: knative_certmanager == True

- name: Render letsencrypt Cluster Issuer template
  template:
    src: "{{ filename }}.yaml.j2"
    dest: "{{ temp }}/knative/{{ filename }}.yaml"
  with_items:
    - config-domain
    - ingress-gateway
  loop_control:
    loop_var: filename
  # when: knative_certmanager == True

- name: Patch knative resources
  command: kubectl apply -f {{ temp }}/knative/{{ filename }}.yaml
  # k8s:
  #   state: present
  #   src: "{{ temp }}/knative/{{ filename }}.yaml"
  with_items:
    - config-domain
    - ingress-gateway
  loop_control:
    loop_var: filename
  # when: knative_certmanager == True

