---
- name: Create knative CRDs.
  command:    kubectl apply --selector knative.dev/crd-install=true -f "{{ role_path }}/files/{{ filename }}.yaml"
  with_items:
    - serving
    - release
  loop_control:
    loop_var: filename
  register: knative_crd
  until: 'knative_crd.rc == 0'
  retries: 15
  delay: 1
  # changed_when: False
  changed_when: "' changed' in knative_crd.stdout"

- name: debug
  debug: var=knative_crd

- name: Create knative serving, eventing and monitoring.
  k8s:
    state: present
    src: "{{ role_path }}/files/{{ filename }}.yaml"
  with_items:
    - serving
    - release
    - monitoring
  loop_control:
    loop_var: filename

- name: Is kafka installed.
  command: kubectl wait kafka/standalone --for=condition=Ready --timeout=30s -n kafka
  register: kafka_installed
  ignore_errors: yes
  changed_when: False

- name: Knative Kafka eventing channel and source
  k8s:
    state: present
    src: "{{ role_path }}/files/{{ filename }}.yaml"
  with_items:
    - kafka-channel
    - kafka-source
  loop_control:
    loop_var: filename
  when: kafka_installed.rc == 0

- name: Ensure /tmp/knative exists.
  file:
    path: "{{ temp }}/knative"
    state: directory

- name: Render letsencrypt Cluster Issuer template
  template:
    src: "{{ filename }}.yaml.j2"
    dest: "{{ temp }}/knative/{{ filename }}.yaml"
  with_items:
    - config-domain
    - ingress-gateway
  loop_control:
    loop_var: filename

- name: Patch knative resources
  k8s:
    state: present
    src: "{{ temp }}/knative/{{ filename }}.yaml"
  with_items:
    - config-domain
    - ingress-gateway
  loop_control:
    loop_var: filename
